package main

import (
	"billing-service/internal/handler"
	"billing-service/internal/repository"
	"billing-service/internal/service"
	"context"
	"fmt"
	"github.com/gin-gonic/gin"
	_ "github.com/lib/pq"
	"log"
	"net/http"
	"os"
	"time"

	"github.com/jackc/pgx/v4/pgxpool"
)

func main() {
	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
	dsn := os.Getenv("DATABASE_URL")
	if dsn == "" {
		log.Fatal("DATABASE_URL is not set")
	}

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	db, err := pgxpool.Connect(ctx, dsn)
	if err != nil {
		log.Fatalf("failed to connect to database: %v", err)
	}
	defer db.Close()

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	if err := db.Ping(ctx); err != nil {
		log.Fatalf("failed to ping db: %v", err)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏ —Å–µ—Ä–≤–∏—Å—ã
	repo := repository.NewRepository(db)
	apiService := service.NewAirbaPayService()

	// –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä Gin
	router := gin.Default()

	// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è index.html
	router.StaticFile("/docs", "./static/index.html")

	// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è API-–∫–ª—é—á–æ–º –¥–ª—è –≤—Å–µ—Ö –∑–∞—â–∏—â—ë–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
	protected := router.Group("/", func(c *gin.Context) {
		key := c.GetHeader("X-Api-Key")
		if key != "sandbox_123" {
			c.JSON(http.StatusUnauthorized, gin.H{"error": "unauthorized"})
			c.Abort()
			return
		}
		c.Next()
	})

	// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
	handler.SetupRoutes(protected, repo, apiService)

	// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
	}
	log.Printf("üöÄ Server running on http://localhost:%s/", port)
	err = http.ListenAndServe(":"+port, router)
	if err != nil {
		log.Fatalf("failed to start server: %v", err)
	}
}
